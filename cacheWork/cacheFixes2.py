# import pandas as pd
# import datetime as dt
# import sys
# import pirep as pr
# from dateutil import parser
# import pickle


# # erroredDates = [
# #     ("2017-04-05 22:00:00.001000+00:00", "2017-04-05 23:00:00+00:00"),
# #     ("2017-09-03 18:00:00.002000+00:00", "2017-09-03 19:00:00.001000+00:00"),
# #     ("2018-02-25 16:00:00.002000+00:00", "2018-02-25 17:00:00.001000+00:00"),
# #     ("2018-12-07 15:00:00.002000+00:00", "2018-12-07 16:00:00.001000+00:00"),
# #     ("2018-12-13 18:00:00.002000+00:00", "2018-12-13 19:00:00.001000+00:00"),
# #     ("2019-01-01 14:00:00.002000+00:00", "2019-01-01 15:00:00.001000+00:00"),
# #     ("2019-02-26 00:00:00.001000+00:00", "2019-02-26 01:00:00.001000+00:00"),
# #     ("2019-04-30 20:00:00.002000+00:00", "2019-04-30 21:00:00.001000+00:00"),
# #     ("2019-05-21 19:00:00.002000+00:00", "2019-05-21 20:00:00.001000+00:00"),
# #     ("2020-03-18 17:00:00.002000+00:00", "2020-03-18 18:00:00.001000+00:00"),
# #     ("2020-09-16 18:00:00.002000+00:00", "2020-09-16 19:00:00.001000+00:00"),
# #     ("2020-10-02 03:00:00.002000+00:00", "2020-10-02 04:00:00.001000+00:00"),
# #     ("2021-01-27 17:00:00.002000+00:00", "2021-01-27 18:00:00.001000+00:00"),
# #     ("2021-04-01 16:00:00.002000+00:00", "2021-04-01 17:00:00.001000+00:00"),
# #     ("2021-05-02 22:00:00.002000+00:00", "2021-05-02 23:00:00.001000+00:00"),
# #     ("2021-06-06 15:00:00.002000+00:00", "2021-06-06 16:00:00.001000+00:00"),
# #     ("2021-06-12 16:00:00.002000+00:00", "2021-06-12 17:00:00.001000+00:00"),
# #     ("2021-06-19 21:00:00.002000+00:00", "2021-06-19 22:00:00.001000+00:00"),
# #     ("2021-11-13 17:00:00.002000+00:00", "2021-11-13 18:00:00.001000+00:00"),
# #     ("2021-12-06 14:00:00.002000+00:00", "2021-12-06 15:00:00.001000+00:00"),
# #     ("2021-12-21 13:00:00.002000+00:00", "2021-12-21 14:00:00.001000+00:00"),
# #     ("2022-02-22 05:00:00.002000+00:00", "2022-02-22 06:00:00.001000+00:00"),
# #     ("2022-04-03 14:00:00.002000+00:00", "2022-04-03 15:00:00.001000+00:00"),
# #     ("2022-04-15 11:00:00.002000+00:00", "2022-04-15 12:00:00+00:00"),
# #     ("2022-04-16 23:00:00.002000+00:00", "2022-04-17 00:00:00+00:00"),
# #     ("2022-06-20 15:00:00.002000+00:00", "2022-06-20 16:00:00.001000+00:00"),
# #     ("2022-07-12 15:00:00.002000+00:00", "2022-07-12 16:00:00.001000+00:00"),
# #     ("2022-08-06 13:00:00.002000+00:00", "2022-08-06 14:00:00.001000+00:00"),
# #     ("2022-08-16 16:00:00.002000+00:00", "2022-08-16 17:00:00.001000+00:00"),
# #     ("2022-09-18 19:00:00.002000+00:00", "2022-09-18 20:00:00.001000+00:00"),
# #     ("2022-11-03 20:00:00.002000+00:00", "2022-11-03 21:00:00.001000+00:00"),
# #     ("2022-11-17 18:00:00.002000+00:00", "2022-11-17 19:00:00.001000+00:00"),
# #     ("2022-11-19 21:00:00.002000+00:00", "2022-11-19 22:00:00.001000+00:00"),
# #     ("2022-12-03 13:00:00.002000+00:00", "2022-12-03 14:00:00.001000+00:00"),
# #     ("2022-12-20 03:00:00.002000+00:00", "2022-12-20 04:00:00.001000+00:00"),
# #     ("2023-01-03 00:00:00.001000+00:00", "2023-01-03 01:00:00.001000+00:00"),
# #     ("2023-01-03 05:00:00.002000+00:00", "2023-01-03 06:00:00.001000+00:00"),
# #     ("2023-01-06 18:00:00.002000+00:00", "2023-01-06 19:00:00.001000+00:00"),
# #     ("2023-01-07 13:00:00.002000+00:00", "2023-01-07 14:00:00.001000+00:00"),
# #     ("2023-01-08 15:00:00.002000+00:00", "2023-01-08 16:00:00.001000+00:00"),
# #     ("2023-01-30 11:00:00.002000+00:00", "2023-01-30 12:00:00+00:00"),
# #     ("2023-02-02 16:00:00.002000+00:00", "2023-02-02 17:00:00.001000+00:00"),
# #     ("2023-02-15 13:00:00.002000+00:00", "2023-02-15 14:00:00.001000+00:00"),
# #     ("2023-04-01 14:00:00.002000+00:00", "2023-04-01 15:00:00.001000+00:00"),
# #     ("2023-06-16 16:00:00.002000+00:00", "2023-06-16 17:00:00.001000+00:00"),
# #     ("2023-10-14 19:00:00.002000+00:00", "2023-10-14 20:00:00.001000+00:00"),
# #     ("2023-10-14 20:00:00.002000+00:00", "2023-10-14 21:00:00.001000+00:00"),
# #     ("2023-11-27 10:00:00.002000+00:00", "2023-11-27 11:00:00.001000+00:00"),
# #     ("2024-02-18 03:00:00.002000+00:00", "2024-02-18 04:00:00.001000+00:00"),
# #     ("2024-02-19 15:00:00.002000+00:00", "2024-02-19 16:00:00.001000+00:00"),
# #     ("2024-04-05 21:00:00.002000+00:00", "2024-04-05 22:00:00.001000+00:00"),
# #     ("2024-04-29 22:00:00.002000+00:00", "2024-04-29 23:00:00.001000+00:00"),
# #     ("2024-10-05 19:00:00.002000+00:00", "2024-10-05 20:00:00.001000+00:00"),
# #     ("2024-10-14 18:00:00.002000+00:00", "2024-10-14 19:00:00.001000+00:00"),
# #     ("2024-11-03 01:00:00.002000+00:00", "2024-11-03 02:00:00.001000+00:00"),
# #     ("2024-11-03 02:00:00.002000+00:00", "2024-11-03 03:00:00.001000+00:00")
# # ]

# erroredDates = [
#     ("2017-04-05 22:00:00.001000+00:00", "2017-04-05 23:00:00+00:00"),
#     ("2017-09-03 18:00:00.002000+00:00", "2017-09-03 19:00:00.001000+00:00"),
#     ("2018-02-25 16:00:00.002000+00:00", "2018-02-25 17:00:00.001000+00:00"),
#     ("2018-12-07 15:00:00.002000+00:00", "2018-12-07 16:00:00.001000+00:00"),
#     ("2018-12-13 18:00:00.002000+00:00", "2018-12-13 19:00:00.001000+00:00"),
#     ("2019-01-01 14:00:00.002000+00:00", "2019-01-01 15:00:00.001000+00:00"),
#     ("2019-02-26 00:00:00.001000+00:00", "2019-02-26 01:00:00.001000+00:00"),
#     ("2019-04-30 20:00:00.002000+00:00", "2019-04-30 21:00:00.001000+00:00"),
#     ("2019-05-21 19:00:00.002000+00:00", "2019-05-21 20:00:00.001000+00:00"),
#     ("2020-03-18 17:00:00.002000+00:00", "2020-03-18 18:00:00.001000+00:00"),
#     ("2020-09-16 18:00:00.002000+00:00", "2020-09-16 19:00:00.001000+00:00"),
#     ("2020-10-02 03:00:00.002000+00:00", "2020-10-02 04:00:00.001000+00:00"),
#     ("2021-01-27 17:00:00.002000+00:00", "2021-01-27 18:00:00.001000+00:00"),
#     ("2021-04-01 16:00:00.002000+00:00", "2021-04-01 17:00:00.001000+00:00"),
#     ("2021-05-02 22:00:00.002000+00:00", "2021-05-02 23:00:00.001000+00:00"),
#     ("2021-06-06 15:00:00.002000+00:00", "2021-06-06 16:00:00.001000+00:00"),
#     ("2021-06-12 16:00:00.002000+00:00", "2021-06-12 17:00:00.001000+00:00"),
#     ("2021-06-19 21:00:00.002000+00:00", "2021-06-19 22:00:00.001000+00:00"),
#     ("2021-11-13 17:00:00.002000+00:00", "2021-11-13 18:00:00.001000+00:00"),
#     ("2021-12-06 14:00:00.002000+00:00", "2021-12-06 15:00:00.001000+00:00"),
#     ("2021-12-21 13:00:00.002000+00:00", "2021-12-21 14:00:00.001000+00:00"),
#     ("2022-02-22 05:00:00.002000+00:00", "2022-02-22 06:00:00.001000+00:00"),
#     ("2022-04-03 14:00:00.002000+00:00", "2022-04-03 15:00:00.001000+00:00"),
#     ("2022-04-15 11:00:00.002000+00:00", "2022-04-15 12:00:00+00:00"),
#     ("2022-04-16 23:00:00.002000+00:00", "2022-04-17 00:00:00+00:00"),
#     ("2022-06-20 15:00:00.002000+00:00", "2022-06-20 16:00:00.001000+00:00"),
#     ("2022-07-12 15:00:00.002000+00:00", "2022-07-12 16:00:00.001000+00:00"),
#     ("2022-08-06 13:00:00.002000+00:00", "2022-08-06 14:00:00.001000+00:00"),
#     ("2022-08-16 16:00:00.002000+00:00", "2022-08-16 17:00:00.001000+00:00"),
#     ("2022-09-18 19:00:00.002000+00:00", "2022-09-18 20:00:00.001000+00:00"),
#     ("2022-11-03 20:00:00.002000+00:00", "2022-11-03 21:00:00.001000+00:00"),
#     ("2022-11-17 18:00:00.002000+00:00", "2022-11-17 19:00:00.001000+00:00"),
#     ("2022-11-19 21:00:00.002000+00:00", "2022-11-19 22:00:00.001000+00:00"),
#     ("2022-12-03 13:00:00.002000+00:00", "2022-12-03 14:00:00.001000+00:00"),
#     ("2022-12-20 03:00:00.002000+00:00", "2022-12-20 04:00:00.001000+00:00"),
#     ("2023-01-03 00:00:00.001000+00:00", "2023-01-03 01:00:00.001000+00:00"),
#     ("2023-01-03 05:00:00.002000+00:00", "2023-01-03 06:00:00.001000+00:00"),
#     ("2023-01-06 18:00:00.002000+00:00", "2023-01-06 19:00:00.001000+00:00"),
#     ("2023-01-07 13:00:00.002000+00:00", "2023-01-07 14:00:00.001000+00:00"),
#     ("2023-01-08 15:00:00.002000+00:00", "2023-01-08 16:00:00.001000+00:00"),
#     ("2023-01-30 11:00:00.002000+00:00", "2023-01-30 12:00:00+00:00"),
#     ("2023-02-02 16:00:00.002000+00:00", "2023-02-02 17:00:00.001000+00:00"),
#     ("2023-02-15 13:00:00.002000+00:00", "2023-02-15 14:00:00.001000+00:00"),
#     ("2023-04-01 14:00:00.002000+00:00", "2023-04-01 15:00:00.001000+00:00"),
#     ("2023-06-16 16:00:00.002000+00:00", "2023-06-16 17:00:00.001000+00:00"),
#     ("2023-10-14 19:00:00.002000+00:00", "2023-10-14 20:00:00.001000+00:00"),
#     ("2023-10-14 20:00:00.002000+00:00", "2023-10-14 21:00:00.001000+00:00"),
#     ("2023-11-27 10:00:00.002000+00:00", "2023-11-27 11:00:00.001000+00:00"),
#     ("2024-02-18 03:00:00.002000+00:00", "2024-02-18 04:00:00.001000+00:00"),
#     ("2024-02-19 15:00:00.002000+00:00", "2024-02-19 16:00:00.001000+00:00"),
#     ("2024-04-05 21:00:00.002000+00:00", "2024-04-05 22:00:00.001000+00:00"),
#     ("2024-04-29 22:00:00.002000+00:00", "2024-04-29 23:00:00.001000+00:00"),
#     ("2024-10-05 19:00:00.002000+00:00", "2024-10-05 20:00:00.001000+00:00"),
#     ("2024-10-14 18:00:00.002000+00:00", "2024-10-14 19:00:00.001000+00:00"),
#     ("2024-11-03 01:00:00.002000+00:00", "2024-11-03 02:00:00.001000+00:00"),
#     ("2024-11-03 02:00:00.002000+00:00", "2024-11-03 03:00:00.001000+00:00")
# ]


# CSV_FNAME = '/skyblue/cacheFixPickle2.csv'
# ERR_LOG_PATH = '/skyblue/cacheFixPickleErrorLog2.txt'

# def create_cache(start, end):
#     print(f"Creating New Batch for {start} to {end}")
#     reports = pr.parse_all(pr.fetch(pr.url(start, end)))

#     # Need timestamps and spread grids

#     # Rip out timestamps for each report
#     timestamps = list(map(lambda r : r["Timestamp"], reports))


#     # Convert to pd
#     df = pd.DataFrame({
#         "Timestamp" : timestamps,
#         "Data"      : [pickle.dumps(r) for r in reports]     
#     })
    
#     df.to_csv(CSV_FNAME, mode = "a", header=False, index=False)



# if __name__ == '__main__':
#     if '--init' in sys.argv:
#         df = pd.DataFrame({
#                 "Timestamp" : [],
#                 "Data"      : []
#             })
#         df.to_csv(CSV_FNAME, mode = "w", header=True, index=False)
#     else:
#         for start, end in erroredDates:
#             curr_start = parser.parse(start)
#             curr_end = curr_start + dt.timedelta(hours=1)
#             final_end = parser.parse(end)
#             with open(ERR_LOG_PATH, mode = 'a') as errFile:
#                 while curr_end < final_end:
#                     try:
#                         create_cache(curr_start, curr_end)
#                     except Exception as e:
#                         print(f"Issue creating cache on range: {curr_start} - {curr_end} with Error:\n {e}", file=errFile)
#                     diff = dt.timedelta(minutes=10)
#                     curr_start = curr_end + dt.timedelta(milliseconds=1)
#                     curr_end += diff
#                 try:
#                     create_cache(curr_start, final_end)
#                 except Exception as e:
#                     print(f"Issue creating cache on range: {curr_start} - {final_end} with Error:\n {e}", file=errFile)

